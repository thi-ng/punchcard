(ns thi.ng.punchcard.core
  (:require
   [thi.ng.geom.viz.core :as viz]
   [thi.ng.geom.svg.core :as svg]
   [thi.ng.color.core :as col]
   [thi.ng.color.gradients :as grad]
   [thi.ng.math.core :as m]
   [thi.ng.ndarray.core :as nd]
   [clojure.string :as str]
   [clojure.java.shell :refer [sh]])
  (:import
   [java.util Date Calendar]
   [java.text SimpleDateFormat]))

(defn make-ramp [e rev?]
  (if rev?
    #(m/mix* %2 % (Math/pow %3 e))
    #(m/mix* % %2 (Math/pow %3 e))))

(def layout
  {:width         540
   :height        300
   :x-axis-pos    200
   :y-axis-pos    50
   :footer-pos    240
   :font-family   "Arial,Helvetica,sans-serif"
   :font-size     10
   :title-size    20
   :font-x-height 8
   :ramp          (make-ramp 1 false)
   :leading       14})

(def weekdays ["SUN" "MON" "TUE" "WED" "THU" "FRI" "SAT"])
(def ^SimpleDateFormat fmt-iso8601 (SimpleDateFormat. "yyyy-MM-dd'T'HH:mm:ssX"))
(def ^SimpleDateFormat fmt-date (SimpleDateFormat. "yyyy-MM-dd HH:mm"))

(def weekday #(.get ^Calendar % Calendar/DAY_OF_WEEK))
(def hour #(.get ^Calendar % Calendar/HOUR_OF_DAY))
(def day+hour (juxt weekday hour))

(defn ->epoch
  [^String d ^SimpleDateFormat fmt]
  (try (.getTime ^Date (.parse fmt d)) (catch Exception e)))

(defn ->cal
  [^long epoch]
  (doto (Calendar/getInstance) (.setTime (Date. epoch))))

(defn ->long
  [^String x]
  (try (Long/parseLong x 10) (catch Exception e)))

(defn re-filter
  [re]
  (let [p (re-pattern re)]
    #(re-find p %)))

(defn epoch-filter
  [from to]
  (cond
    (and from to) #(and (>= % from) (< % to))
    from          #(>= % from)
    to            #(< % to)
    :else         identity))

(defn load-commits-fs
  [repo-path author from to]
  (prn repo-path author from to)
  (let [flt-author (if author (re-filter author) identity)
        flt-epoch  (epoch-filter (->epoch from fmt-date) (->epoch to fmt-date))]
    (->> (sh "git" "log" "--pretty=format:%aI %ae" :dir repo-path)
         :out
         str/split-lines
         (filter flt-author)
         (map #(-> % (str/split #" ") first (->epoch fmt-iso8601)))
         (filter flt-epoch)
         (map ->cal)
         (sort))))

(def hour-label
  (viz/default-svg-label #(if (< % 24) (format "%02d:00" (int %)) "")))

(defn weekday-label
  [p x] (svg/text (m/+ p [0 14]) (nth weekdays (int x) "")))

(defn legend
  [layout gradient ramp min max]
  (let [x1 (- (:width layout) 110)
        x2 (- (:width layout) 10)
        y1 (- (:footer-pos layout) (:font-x-height layout))
        y2 (+ (:footer-pos layout) (:leading layout))
        h  (:font-size layout)]
    (svg/group
     {}
     (for [i (m/norm-range 49)]
       (svg/rect
        [(m/mix* x1 (- x2 2) i) y1] 2 h
        {:fill (apply grad/cosine-gradient-color (conj gradient (ramp 0 1 i)))}))
     (svg/text [x1 y2] min)
     (svg/text [x2 y2] max {:text-anchor "end"}))))

(defn footer
  [layout commits title min max]
  (let [x (:y-axis-pos layout)
        y (:footer-pos layout)
        l (:leading layout)]
    (svg/group
     {}
     (svg/text
      [x 30] title {:font-size (:title-size layout)})
     (svg/text
      [x y]
      (str "Commits per weekday / hour of day, "
           "min: " min ", max: " max
           ", total: ", (count commits)))
     (svg/text
      [x (+ y l)]
      (format
       "Period: %s - %s"
       (.format fmt-date (.getTime ^Calendar (first commits)))
       (.format fmt-date (.getTime ^Calendar (last commits)))))
     (svg/text
      [x (+ y (* 3 l))] "Generated by: http://thi.ng/punchcard"))))

(defn punch-card
  [{:keys [commits gradient ramp fg bg out title]}]
  (if (seq commits)
    (let [grouped  (map (fn [[k v]] [k (count v)]) (group-by day+hour commits))
          mat      (nd/ndarray :int8 (byte-array (* 7 24)) [7 24])
          _        (doseq [[[d h] n] grouped] (nd/set-at mat (dec d) h n))
          min      (reduce min (filter pos? mat))
          max      (reduce max mat)
          gradient (grad/cosine-schemes gradient)]
      (->> {:x-axis (viz/linear-axis
                     {:domain      [0 24]
                      :range       [(:y-axis-pos layout) (- (:width layout) 10)]
                      :major       6
                      :minor       1
                      :pos         (:x-axis-pos layout)
                      :label       hour-label
                      :label-style {:fill fg :text-anchor "start"}
                      :attribs     {:stroke fg}})
            :y-axis (viz/linear-axis
                     {:domain      [0 7]
                      :range       [50 (- (:x-axis-pos layout) 10)]
                      :major       1
                      :pos         (- (:y-axis-pos layout) 10)
                      :label       weekday-label
                      :label-style {:fill fg}
                      :attribs     {:stroke fg}})
            :data   [{:matrix        mat
                      :value-domain  [min max]
                      :palette       (grad/cosine-gradient max ramp gradient)
                      :palette-scale viz/linear-scale
                      :layout        viz/svg-heatmap
                      :shape         viz/circle-cell}]}
           (viz/svg-plot2d-cartesian)
           (svg/svg
            (select-keys layout [:width :height :font-family :font-size])
            (if bg
              (svg/rect [0 0] (:width layout) (:height layout) {:fill bg :stroke "none"}))
            (svg/group
             {:fill fg}
             (legend layout gradient ramp min max)
             (footer layout commits title min max)))
           (svg/serialize)
           (spit out)))
    (println "no commits, skipping generation...")))

(defn -main
  [& {:strs [--repo --author --title --gradient --out --from --to]
      :or   {--out      "punchcard.svg"
             --gradient "yellow-green-blue"
             --title    --repo}
      :as   opts}]
  (assert --repo "repo path missing")
  (prn opts)
  (punch-card
   {:commits  (load-commits-fs --repo --author --from --to)
    :gradient (keyword --gradient)
    :ramp     (make-ramp
               (Double/parseDouble (opts "--ramp" "1"))
               (= (opts "--reverse") "1"))
    :bg       (opts "--bg" "white")
    :fg       (opts "--fg" "black")
    :title    --title
    :out      --out})
  (System/exit 0))
