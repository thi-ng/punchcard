(ns thi.ng.punchcard.core
  (:require
   [thi.ng.geom.viz.core :as viz]
   [thi.ng.geom.svg.core :as svg]
   [thi.ng.color.core :as col]
   [thi.ng.color.gradients :as grad]
   [thi.ng.math.core :as m]
   [thi.ng.ndarray.core :as nd]
   [clojure.string :refer [split-lines]]
   [clojure.java.shell :refer [sh]])
  (:import
   [java.util Date Calendar]
   [java.text SimpleDateFormat]))

(def layout
  {:width         540
   :height        300
   :x-axis-pos    200
   :y-axis-pos    50
   :footer-pos    240
   :font-family   "Arial,Helvetica,sans-serif"
   :font-size     10
   :title-size    20
   :font-x-height 8
   :leading       14})

(def weekdays ["SUN" "MON" "TUE" "WED" "THU" "FRI" "SAT"])
(def ^SimpleDateFormat fmt-iso8601 (SimpleDateFormat. "yyyy-MM-dd'T'HH:mm:ssX"))
(def ^SimpleDateFormat fmt-date (SimpleDateFormat. "yyyy-MM-dd HH:mm"))

(def weekday #(.get ^Calendar % Calendar/DAY_OF_WEEK))
(def hour #(.get ^Calendar % Calendar/HOUR_OF_DAY))
(def day+hour (juxt weekday hour))

(defn ->cal
  [^String d]
  (doto (Calendar/getInstance) (.setTime (.parse fmt-iso8601 d))))

(def hour-label
  (viz/default-svg-label #(if (< % 24) (format "%02d:00" (int %)) "")))

(defn weekday-label
  [p x] (svg/text (m/+ p [0 14]) (nth weekdays (int x) "")))

(defn load-commits-fs
  [repo-path]
  (->> (sh "git" "log" "--pretty=format:%aI" :dir repo-path)
       :out
       split-lines
       (map ->cal)))

(defn legend
  [layout gradient max]
  (let [x1 (- (:width layout) 110)
        x2 (- (:width layout) 10)
        y1 (- (:footer-pos layout) (:font-x-height layout))
        y2 (+ (:footer-pos layout) (:leading layout))
        h  (:font-size layout)]
    (svg/group
     {}
     (for [i (m/norm-range 20)]
       (svg/rect
        [(m/mix* x1 (- x2 5) i) y1] 5 h
        {:fill (apply grad/cosine-gradient-color (conj gradient i))}))
     (svg/text [x1 y2] 1)
     (svg/text [x2 y2] max {:text-anchor "end"}))))

(defn footer
  [layout commits title max]
  (let [x (:y-axis-pos layout)
        y (:footer-pos layout)
        l (:leading layout)]
    (svg/group
     {}
     (svg/text
      [x 30] title {:font-size (:title-size layout)})
     (svg/text
      [x y]
      (str "Commits per weekday / hour of day, "
           "min: 1, max: " max
           ", total: ", (count commits)))
     (svg/text
      [x (+ y l)]
      (format
       "Period: %s - %s"
       (.format fmt-date (.getTime ^Calendar (first commits)))
       (.format fmt-date (.getTime ^Calendar (last commits)))))
     (svg/text
      [x (+ y (* 3 l))] "Generated by: http://thi.ng/punchcard"))))

(defn punch-card
  [{:keys [out repo title gradient]}]
  (let [commits  (sort (load-commits-fs repo))
        grouped  (map (fn [[k v]] [k (count v)]) (group-by day+hour commits))
        mat      (nd/ndarray :int8 (byte-array (* 7 24)) [7 24])
        _        (doseq [[[d h] n] grouped] (nd/set-at mat (dec d) h n))
        max      (reduce max mat)
        gradient (grad/cosine-schemes gradient)]
    (->> {:x-axis (viz/linear-axis
                   {:domain [0 24]
                    :range  [(:y-axis-pos layout) (- (:width layout) 10)]
                    :major  6
                    :minor  1
                    :pos    (:x-axis-pos layout)
                    :label  hour-label
                    :label-style {:text-anchor "start"}})
          :y-axis (viz/linear-axis
                   {:domain [0 7]
                    :range  [50 (- (:x-axis-pos layout) 10)]
                    :major  1
                    :pos    (- (:y-axis-pos layout) 10)
                    :label  weekday-label})
          :data   [{:matrix        mat
                    :value-domain  [1 max]
                    :palette       (grad/cosine-gradient max gradient)
                    :palette-scale viz/linear-scale
                    :layout        viz/svg-heatmap
                    :shape         viz/circle-cell}]}
         (viz/svg-plot2d-cartesian)
         (svg/svg
          (select-keys layout [:width :height :font-family :font-size])
          (legend layout gradient max)
          (footer layout commits title max))
         (svg/serialize)
         (spit out))
    ))

(defn -main
  [& {:strs [--repo --title --gradient --out]
      :or   {--out      "punchcard.svg"
             --title    --repo
             --gradient "yellow-green-blue"}}]
  (assert --repo "repo path missing")
  (punch-card
   {:repo     --repo
    :title    --title
    :gradient (keyword --gradient)
    :out      --out})
  (System/exit 0))
